<style lang="less">
  page {
    height: 100%;
    background-color: #323232;
    position: fixed;
    top: 0;
    bottom: 0;
  }
  .container {

  }
  .content {
    width: 80%;
    height: 80%;
    margin-top: 20rpx;
  }
  .back-image {
    width: 100%;
    height: 75%;
  }
  .bottom-text {
    height: 25%;
    text-align: center;
    background-color: white;
  } 
  .image {
    width: 100%;
    height: 100%;
  }
  .text {
    padding-top: 45rpx;
    color:#3e3e3e;
    font-size: 40rpx;
  }
  .english {
    padding-top: 20rpx;
    width: 89%;
    margin-left: auto;
    margin-right: auto;
    color: #999999;
    font-size: 30rpx;
  }
  .circle {
    background-color:#26eab3;
    width: 100rpx;
    height: 100rpx;
    border-radius: 70rpx;
    position: absolute;
    top: 87%;
  }
  .stand {
    background: white;
    height: 50rpx;
    position: absolute;
    width: 3rpx;
    left: 50rpx;
    top: 25rpx;
  }
  .across {
    background: white;
    position: absolute;
    width: 50rpx;
    height: 3rpx;
    left: 25rpx;
    top: 50rpx;
  }
  .year {
    position: absolute;
    margin-left: 30rpx;
    font-size: 50rpx;
    margin-top: 25rpx;
    color: #c7c1c3;
  }
  .month {
    position: absolute;
    margin-left: 30rpx;
    margin-top: 94rpx;
    color: #c4b2a1;
  }
  .day {
    position:absolute;
    margin-left:30rpx;
    margin-top:145rpx;
    font-size:60rpx;
    color:#f2f2f3;
  }
  .day-tag {
    position:absolute;
    margin-left:110rpx;
    margin-top:175rpx;
    font-size:36rpx;
    color:#f2f2f3;
  }

  .modal {
    background-color:white;
    // width: 2198rpx;
    // height: 2198rpx;
    position: absolute;
    font-size: 25rpx;
    border-radius: 70%;
    // top:-60rpx;
  }
  // .transform {
  //   transform: scale(0)
  // }
  .modal-content {
    width: 26%;
    margin-left:auto;
    margin-right:auto;
    margin-top: 210rpx;
  }
  .event {
    margin-top:50rpx;
  }
  .line {
    height: 2rpx;
    background-color:#e4e4e4;
    margin-top:15rpx;
  }
  .calendar {
    margin-top:35rpx;
  }
  .calendar-icon {
    width:22rpx;
    height:22rpx;
    position:absolute;
    margin-top:12rpx;
  }
  .calendar-input {
    margin-left: 40rpx;
  }
  .desc {
    margin-top:35rpx;
    width:100%;
    height:150rpx;
  }
  .demo {
    width:100%;
    margin-top:25rpx;
    position: relative;
  }
  .demo-image {
    width:100%;
    height: 250rpx;
  }
  .demo-text {
    color:#fff4ef;
    position:absolute;
    top: 106rpx;
    left: 40rpx;
    font-size: 40rpx;
  }
  .save-btn {
    width:60%;
    color:#fcfeff;
    background-color:#26eab3;
    border-radius:45rpx;
    font-size:30rpx;
    margin-top: 120rpx;
    line-height: 92rpx;
    height: 90rpx;
  }
  .circle-modal {
    background-color:#26eab3;
    width: 100rpx;
    height: 100rpx;
    border-radius: 70%;
    position: relative;
    top: 129rpx;
    margin-left: auto;
    margin-right: auto;
  }
  .stand-modal {
    background: white;
    height: 50rpx;
    position: absolute;
    width: 3rpx;
    left: 50%;
    top: 26%;
    transform:rotate(45deg);
  }
  .across-modal {
    background: white;
    position: absolute;
    width: 50rpx;
    height: 3rpx;
    left: 26%;
    top: 50%;
    transform:rotate(45deg);
  }
  .phcolor {
    color: #9e9e9e;
  }
  .cross-icon {
    width:30rpx;
    height:30rpx;
    position:relative;
    float:right;
    top:-38rpx;
    right:20rpx;
  }
</style>
<template>
  <view class="container">
    <view class="content">
      <view class="back-image">
        <view class="year">{{year}}</view>
        <view class="month">{{month}}</view>
        <view class="day">{{day}}</view>
        <view class="day-tag">{{dayTag}}</view>
        <image class="image" mode="aspectFill" src="../images/back.jpg"></image>
      </view>
      <view class="bottom-text">
        <view class="text">彼年豆蔻, 谁许谁地老天荒</view>
        <view class="english">Years cardamom, who made who The end of life</view>
      </view>
    </view>
    <view class="circle" bindtap="add">
      <view class="stand"></view>
      <view class="across"></view>
    </view>
    <view class="modal {{transform}}" style="width:{{length}};height:{{length}}" animation="{{animationData}}"> 
      <view class="modal-content">
        <view class="title">
          <input 
            class="event" 
            bindinput="handleTitleInput"
            bindfocus="handleTitleFocus" 
            bindblur="handleTitleBlur"
            maxlength="30" 
            placeholder-class="phcolor" 
            placeholder="今天做了什么事"></input>
          <image
           class="cross-icon"
          mode="aspectFill" 
          src="../images/cross.png"
          style="display:{{display}}"></image>  
        </view>
        <view class="line"></view>
        <view class="calendar">
          <image class="calendar-icon" mode="aspectFill" src="../images/calendar.png"></image>
          <input class="calendar-input"></input>
        </view>
        <view class="line"></view>
        <textarea  placeholder-class="phcolor" class='desc' placeholder="写下你的描述" />
        <view class="line"></view>
        <view class="demo">
          <image class="demo-image" mode="aspectFill" src="../images/demo.jpg"></image>
          <view class="demo-text">背景</view>
        </view>
        <button class="save-btn">保存</button>
        <view class="circle-modal" bindtap="del">
          <view class="stand-modal"></view>
          <view class="across-modal"></view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Panel from '@/components/panel' // alias example
  import Counter from 'counter' // alias example
  import List from '../components/list' // aliasFields example
  import moduleA from 'module-a' // aliasFields ignore module example
  import Group from '../components/group'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'

  console.log('moduleA ignored: ', moduleA) // => moduleA ignored: {}

  @connect({
    num (state) {
      return state.counter.num
    },
    asyncNum (state) {
      return state.counter.asyncNum
    },
    sumNum (state) {
      return state.counter.num + state.counter.asyncNum
    }
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '拾光记',
      disableScroll: true,
      navigationBarTextStyle: 'white'
    }
    components = {
      panel: Panel,
      counter1: Counter,
      counter2: Counter,
      list: List,
      group: Group,
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      year: '',
      month: '',
      day: '',
      dayTag: '',
      display: 'none',
      transform: 'transform',
      animationData: {},
      length: '',
      top: '',

      mynum: 20,
      userInfo: {
        nickName: '加载中...'
      },
      normalTitle: '原始标题',
      setTimeoutTitle: '标题三秒后会被修改',
      count: 0,
      netrst: '',
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      handleTitleInput (e) {
        if (e.detail.value) {
          this.display = 'block'
        } else {
          this.display = 'none'
        }
      },
      handleTitleFocus (e) {
        if (e.detail.value) {
          this.display = 'block'
        } else {
          this.display = 'none'
        }
      },
      handleTitleBlur () {
        this.display = 'none'
      },
      add () {
        // this.transform = ''
        this.animation.scale(1).step({ duration: 1000 })
        this.setData({
          animationData: this.animation.export()
        })
      },
      del () {
        this.animation.scale(0.01).step({ duration: 1000 })
        this.setData({
          animationData: this.animation.export()
        })
      }
    }

    onLoad () {
      // const self = this;
      const animation = wx.createAnimation({
        duration: 1000
      })    
      this.animation = animation
      animation.scale(0.01).step(0)
      
      wx.getSystemInfo({
        success: (res) => {
          console.log(res.windowHeight)
          const height = res.windowHeight * 0.87 + 50
          const width = res.windowWidth / 2
          const length = res.windowHeight * 0.87 * 2 + 50
          this.length = length + 'px'
          this.animationData = this.animation.export()
          this.top = Math.sqrt(height * height + width * width)
          console.log(this.top - height)
        },
        fail: (res) => {
          
        },
        complete: (res) => {
          
        }
      })
      console.log(1)
    }
  }
</script>
